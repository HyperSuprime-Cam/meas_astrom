# -*- python -*-

import lsst.sconsUtils

dependencies = {
    "required": ["utils", "cfitsio", "wcslib", "xpa", "minuit2", "afw", "astrometry_net", "eigen"],
    "buildRequired": ["boost_test", "swig"],
}


boostInt64IsLongCheckSrc = """
    #include "boost/cstdint.hpp"
    #include "boost/static_assert.hpp"
    #include "boost/type_traits/is_same.hpp"

    int main() {
        BOOST_STATIC_ASSERT((boost::is_same<long, boost::int64_t>::value));
        return 0;
    }
    """

def CustomCompileCheck(context, message, source, extension = '.c'):
    context.Message(message)
    result = context.TryCompile(source, extension)
    context.Result(result)
    return result

class Configuration(lsst.sconsUtils.Configuration):

    def addCustomTests(self, tests):
        tests["CustomCompileCheck"] = CustomCompileCheck

    def configure(self, conf, packages, check=False, build=True):
        lsst.sconsUtils.Configuration.configure(self, conf, packages, check, build)
        if conf.CustomCompileCheck('Checking whether boost::int64_t is long ... ',
                                   boostInt64IsLongCheckSrc, extension='.cc'):
            conf.env.Append(SWIGFLAGS='-DSWIGWORDSIZE64')

config = Configuration(
    __file__,
    headers=["lsst/meas/astrom.h"],
    hasDoxygenInclude=False,
    hasSwigFiles=True,
)
