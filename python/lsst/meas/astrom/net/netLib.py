# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""

Python interface to lsst::afw::meas::astrom::net classes

"""

import _netLib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _netLib.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _netLib.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _netLib.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _netLib.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _netLib.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _netLib.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _netLib.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _netLib.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _netLib.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _netLib.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _netLib.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _netLib.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _netLib.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _netLib.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _netLib.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _netLib.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _netLib.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    """Proxy of C++ ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _netLib.ios_base_erase_event
    imbue_event = _netLib.ios_base_imbue_event
    copyfmt_event = _netLib.ios_base_copyfmt_event
    def register_callback(*args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _netLib.ios_base_register_callback(*args)

    def flags(*args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _netLib.ios_base_flags(*args)

    def setf(*args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _netLib.ios_base_setf(*args)

    def unsetf(*args):
        """unsetf(self, fmtflags __mask)"""
        return _netLib.ios_base_unsetf(*args)

    def precision(*args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _netLib.ios_base_precision(*args)

    def width(*args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _netLib.ios_base_width(*args)

    def sync_with_stdio(*args):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _netLib.ios_base_sync_with_stdio(*args)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _netLib.ios_base_imbue(*args)

    def getloc(*args):
        """getloc(self) -> locale"""
        return _netLib.ios_base_getloc(*args)

    def xalloc(*args):
        """xalloc() -> int"""
        return _netLib.ios_base_xalloc(*args)

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(*args):
        """iword(self, int __ix) -> long"""
        return _netLib.ios_base_iword(*args)

    def pword(*args):
        """pword(self, int __ix) -> void"""
        return _netLib.ios_base_pword(*args)

    __swig_destroy__ = _netLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _netLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _netLib.cvar
ios_base.boolalpha = _netLib.cvar.ios_base_boolalpha
ios_base.dec = _netLib.cvar.ios_base_dec
ios_base.fixed = _netLib.cvar.ios_base_fixed
ios_base.hex = _netLib.cvar.ios_base_hex
ios_base.internal = _netLib.cvar.ios_base_internal
ios_base.left = _netLib.cvar.ios_base_left
ios_base.oct = _netLib.cvar.ios_base_oct
ios_base.right = _netLib.cvar.ios_base_right
ios_base.scientific = _netLib.cvar.ios_base_scientific
ios_base.showbase = _netLib.cvar.ios_base_showbase
ios_base.showpoint = _netLib.cvar.ios_base_showpoint
ios_base.showpos = _netLib.cvar.ios_base_showpos
ios_base.skipws = _netLib.cvar.ios_base_skipws
ios_base.unitbuf = _netLib.cvar.ios_base_unitbuf
ios_base.uppercase = _netLib.cvar.ios_base_uppercase
ios_base.adjustfield = _netLib.cvar.ios_base_adjustfield
ios_base.basefield = _netLib.cvar.ios_base_basefield
ios_base.floatfield = _netLib.cvar.ios_base_floatfield
ios_base.badbit = _netLib.cvar.ios_base_badbit
ios_base.eofbit = _netLib.cvar.ios_base_eofbit
ios_base.failbit = _netLib.cvar.ios_base_failbit
ios_base.goodbit = _netLib.cvar.ios_base_goodbit
ios_base.app = _netLib.cvar.ios_base_app
ios_base.ate = _netLib.cvar.ios_base_ate
ios_base.binary = _netLib.cvar.ios_base_binary
ios_base.ios_base_in = _netLib.cvar.ios_base_ios_base_in
ios_base.out = _netLib.cvar.ios_base_out
ios_base.trunc = _netLib.cvar.ios_base_trunc
ios_base.beg = _netLib.cvar.ios_base_beg
ios_base.cur = _netLib.cvar.ios_base_cur
ios_base.end = _netLib.cvar.ios_base_end

def ios_base_sync_with_stdio(*args):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _netLib.ios_base_sync_with_stdio(*args)

def ios_base_xalloc(*args):
  """ios_base_xalloc() -> int"""
  return _netLib.ios_base_xalloc(*args)

class ios(ios_base):
    """Proxy of C++ ios class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args):
        """rdstate(self) -> iostate"""
        return _netLib.ios_rdstate(*args)

    def clear(*args):
        """
        clear(self, iostate __state=goodbit)
        clear(self)
        """
        return _netLib.ios_clear(*args)

    def setstate(*args):
        """setstate(self, iostate __state)"""
        return _netLib.ios_setstate(*args)

    def good(*args):
        """good(self) -> bool"""
        return _netLib.ios_good(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _netLib.ios_eof(*args)

    def fail(*args):
        """fail(self) -> bool"""
        return _netLib.ios_fail(*args)

    def bad(*args):
        """bad(self) -> bool"""
        return _netLib.ios_bad(*args)

    def exceptions(*args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _netLib.ios_exceptions(*args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _netLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netLib.delete_ios
    __del__ = lambda self : None;
    def tie(*args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _netLib.ios_tie(*args)

    def rdbuf(*args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _netLib.ios_rdbuf(*args)

    def copyfmt(*args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _netLib.ios_copyfmt(*args)

    def fill(*args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _netLib.ios_fill(*args)

    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _netLib.ios_imbue(*args)

    def narrow(*args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _netLib.ios_narrow(*args)

    def widen(*args):
        """widen(self, char __c) -> char_type"""
        return _netLib.ios_widen(*args)

ios_swigregister = _netLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ ostream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _netLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _netLib.ostream___lshift__(*args)

    def put(*args):
        """put(self, char_type __c) -> ostream"""
        return _netLib.ostream_put(*args)

    def write(*args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _netLib.ostream_write(*args)

    def flush(*args):
        """flush(self) -> ostream"""
        return _netLib.ostream_flush(*args)

    def tellp(*args):
        """tellp(self) -> pos_type"""
        return _netLib.ostream_tellp(*args)

    def seekp(*args):
        """
        seekp(self, pos_type ?) -> ostream
        seekp(self, off_type ?, seekdir ?) -> ostream
        """
        return _netLib.ostream_seekp(*args)

ostream_swigregister = _netLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ istream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _netLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _netLib.istream___rshift__(*args)

    def gcount(*args):
        """gcount(self) -> streamsize"""
        return _netLib.istream_gcount(*args)

    def get(*args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _netLib.istream_get(*args)

    def getline(*args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _netLib.istream_getline(*args)

    def ignore(*args):
        """
        ignore(self, streamsize __n=1, int_type __delim=std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n=1) -> istream
        ignore(self) -> istream
        """
        return _netLib.istream_ignore(*args)

    def peek(*args):
        """peek(self) -> int_type"""
        return _netLib.istream_peek(*args)

    def read(*args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _netLib.istream_read(*args)

    def readsome(*args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _netLib.istream_readsome(*args)

    def putback(*args):
        """putback(self, char_type __c) -> istream"""
        return _netLib.istream_putback(*args)

    def unget(*args):
        """unget(self) -> istream"""
        return _netLib.istream_unget(*args)

    def sync(*args):
        """sync(self) -> int"""
        return _netLib.istream_sync(*args)

    def tellg(*args):
        """tellg(self) -> pos_type"""
        return _netLib.istream_tellg(*args)

    def seekg(*args):
        """
        seekg(self, pos_type ?) -> istream
        seekg(self, off_type ?, seekdir ?) -> istream
        """
        return _netLib.istream_seekg(*args)

istream_swigregister = _netLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ iostream class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _netLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _netLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _netLib.endl_cb_ptr
endl = _netLib.endl
ends_cb_ptr = _netLib.ends_cb_ptr
ends = _netLib.ends
flush_cb_ptr = _netLib.flush_cb_ptr
flush = _netLib.flush
import lsst.pex.exceptions

import lsst.utils

def version(HeadURL = r"$HeadURL: svn+ssh://svn.lsstcorp.org/DMS/afw/trunk/python/lsst/afw/net/netLib.i $"):
    """Return a version given a HeadURL string. If a different version is setup, return that too"""

    return HeadURL

import lsst.afw.image.imageLib
import lsst.daf.base.baseLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.daf.data.dataLib
import lsst.security.securityLib
class GlobalAstrometrySolution(_object):
    """Proxy of C++ GlobalAstrometrySolution class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, GlobalAstrometrySolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalAstrometrySolution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string filename) -> GlobalAstrometrySolution
        __init__(self, string filename, std::vector<(lsst::afw::detection::Source::Ptr,std::allocator<(lsst::afw::detection::Source::Ptr)>)> src) -> GlobalAstrometrySolution
        """
        this = _netLib.new_GlobalAstrometrySolution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netLib.delete_GlobalAstrometrySolution
    __del__ = lambda self : None;
    def parseConfigStream(*args):
        """parseConfigStream(self, FILE fconf) -> int"""
        return _netLib.GlobalAstrometrySolution_parseConfigStream(*args)

    def parseConfigFile(*args):
        """parseConfigFile(self, string filename) -> int"""
        return _netLib.GlobalAstrometrySolution_parseConfigFile(*args)

    def setStarlist(*args):
        """setStarlist(self, std::vector<(lsst::afw::detection::Source::Ptr,std::allocator<(lsst::afw::detection::Source::Ptr)>)> src)"""
        return _netLib.GlobalAstrometrySolution_setStarlist(*args)

    def getWcs(*args):
        """getWcs(self) -> Wcs"""
        return _netLib.GlobalAstrometrySolution_getWcs(*args)

    def getNumIndices(*args):
        """getNumIndices(self) -> int"""
        return _netLib.GlobalAstrometrySolution_getNumIndices(*args)

    def getIndexPath(*args):
        """getIndexPath(self, int i) -> string"""
        return _netLib.GlobalAstrometrySolution_getIndexPath(*args)

    def addIndexFile(*args):
        """addIndexFile(self, string path)"""
        return _netLib.GlobalAstrometrySolution_addIndexFile(*args)

    def setHpRange(*args):
        """setHpRange(self, double range)"""
        return _netLib.GlobalAstrometrySolution_setHpRange(*args)

    def blindSolve(*args):
        """blindSolve(self) -> int"""
        return _netLib.GlobalAstrometrySolution_blindSolve(*args)

    def verifyRaDec(*args):
        """verifyRaDec(self, double ra, double dec) -> bool"""
        return _netLib.GlobalAstrometrySolution_verifyRaDec(*args)

    def verifyWcs(*args):
        """verifyWcs(self, Ptr wcsPtr) -> bool"""
        return _netLib.GlobalAstrometrySolution_verifyWcs(*args)

GlobalAstrometrySolution_swigregister = _netLib.GlobalAstrometrySolution_swigregister
GlobalAstrometrySolution_swigregister(GlobalAstrometrySolution)



